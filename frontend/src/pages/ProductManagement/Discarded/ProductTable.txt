// React component for the table
import React, { useState, useEffect } from "react";
import { Table, TableHead, TableBody, TableRow, TableCell, TextField } from "@mui/material";
import { Button, Select, MenuItem } from "@mui/material";
import axios from "axios";

const ProductTable = () => {
// Initialize state for table data and filter/search inputs
const [products, setProducts] = useState([]);
const [filterDate, setFilterDate] = useState("");
const [searchTerm, setSearchTerm] = useState("");

// Fetch list of products from database on mount
useEffect(() => {
axios
.get("http://localhost:3000/admin-portal/production-management")
.then((response) => {
setProducts(response.data);
})
.catch((error) => {
console.log(error);
});
}, []);

// Handler for deleting a product
const handleDelete = (productId) => {
// Send DELETE request to server to remove product from database
axios
.delete('http://localhost:3000/admin-portal/production-management/${productId}')
.then((response) => {
console.log(response);
// Update local state to remove deleted product from table
setProducts(products.filter((product) => product._id !== productId));
})
.catch((error) => {
console.log(error);
});
};

const URL = "http://localhost:3000/admin-portal/production-management";
// Handler for updating a product
const handleUpdate = (productId, updatedProduct) => {
// Send PUT request to server to update product in database
axios
.put('http://localhost:3000/admin-portal/production-management/${productId}', updatedProduct)
.then((response) => {
console.log(response);
// Update local state to reflect updated product in table
setProducts(
products.map((product) =>
product._id === productId ? updatedProduct : product
)
);
})
.catch((error) => {
console.log(error);
});
};

// Filter products by production date
const filteredProducts =
filterDate !== ""
? products.filter(
(product) => product.productionDate === filterDate
)
: products;

// Search products by product name
const searchedProducts =
searchTerm !== ""
? filteredProducts.filter((product) =>
product.productName.toLowerCase().includes(searchTerm.toLowerCase())
)
: filteredProducts;

return (
<div className="p-10 mb-[20px] bg-white rounded-xl h-full">
<TextField
label="Filter by Production Date"
type="date"
value={filterDate}
onChange={(event) => setFilterDate(event.target.value)}
InputLabelProps={{
shrink: true,
}}
/>
<TextField
label="Search by Product Name"
value={searchTerm}
onChange={(event) => setSearchTerm(event.target.value)}
/>
<Table>
<TableHead>
<TableRow>
<TableCell>Batch Number</TableCell>
<TableCell>Product Name</TableCell>
<TableCell>Quantity Produced</TableCell>
<TableCell>Production Date</TableCell>
<TableCell>Expiration Date</TableCell>
<TableCell>Sales Price</TableCell>
<TableCell>
Production Cost</TableCell>
<TableCell>Action</TableCell>
</TableRow>
</TableHead>
<TableBody>
{searchedProducts.map((product) => (
<TableRow key={product._id}>
<TableCell>{product.batchNumber}</TableCell>
<TableCell>{product.productName}</TableCell>
<TableCell>{product.quantityProduced}</TableCell>
<TableCell>{product.productionDate}</TableCell>
<TableCell>{product.expirationDate}</TableCell>
<TableCell>{product.salesPrice}</TableCell>
<TableCell>
Raw Materials: {product.productionCost.rawMaterials} <br />
Labor: {product.productionCost.labor} <br />
Packing: {product.productionCost.packing} <br />
Other: {product.productionCost.other} <br />
</TableCell>
<TableCell>
<Button
variant="contained"
color="primary"
onClick={() => handleUpdate(product._id, product)}
>
Update
</Button>{" "}
<Button
variant="contained"
color="secondary"
onClick={() => handleDelete(product._id)}
>
Delete
</Button>
</TableCell>
</TableRow>
))}
</TableBody>
</Table>
</div>
);
};

export default ProductTable;